import os
import requests
import time

TARGET_DIR = './dummy_data'
FAKE_EXTENSION = '.locked'
FAKE_MODULES_URLS = [
    "https://1idgroup.com",
    "https://1idgroup.com",
    "https://1idgroup.com",
]

def download_fake_modules():
    print("\n[T1105 - Ingress Tool Transfer] Starting to download fake modules...\n")
    print("Detail: Adversaries might upload malicious software, scripts, or other tools to a target system prior to use during post-compromise operations.")
    for url in FAKE_MODULES_URLS:
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                print(f"Successfully downloaded module from {url}!")
            else:
                print(f"Failed to download module from {url}.")
            time.sleep(1)  # Pausing for 1 second to simulate the download
        except requests.RequestException:
            print(f"Error while trying to download from {url}.")

def fake_encrypt():
    print("\n[T1022 - Data Encrypted] Now encrypting files for impact...")
    print("Detail: An adversary might encrypt data to affect its confidentiality or potentially leverage it as a form of extortion.")
    time.sleep(2)  # Pausing for 2 seconds to simulate encryption
    for root, _, files in os.walk(TARGET_DIR):
        for file in files:
            src = os.path.join(root, file)
            dst = src + FAKE_EXTENSION
            os.rename(src, dst)
    print("Encryption completed!")

def fake_exfiltration():
    print("\n[T1041 - Exfiltration Over Command and Control Channel] Exfiltrating data...")
    print("Detail: Adversaries might exfiltrate data over a different protocol from the main command and control server, or from a different network connection.")
    time.sleep(3)  # Pausing for 3 seconds to simulate data exfiltration
    print("Data exfiltration completed!")

def fake_decrypt():
    print("\n[T1070.004 - File Deletion] Now decrypting files...")
    print("Detail: Adversaries might attempt to make files or data inaccessible by renaming or otherwise modifying them. The intent is to render data useless.")
    time.sleep(2)  # Pausing for 2 seconds to simulate decryption
    for root, _, files in os.walk(TARGET_DIR):
        for file in files:
            if file.endswith(FAKE_EXTENSION):
                src = os.path.join(root, file)
                dst = src.replace(FAKE_EXTENSION, '')
                os.rename(src, dst)
    print("Decryption completed!")

def display_ransom_note():
    message = """
    ---------------------
    RANSOMWARE SIMULATION [T1486 - Data Encrypted for Impact]
    ---------------------
    Detail: Adversaries might encrypt files found on the system to make them inaccessible, aiming to disrupt system or network operations with the expectation of a ransom in exchange for decryption instructions.
    Your files have been 'encrypted'!
    To 'decrypt' them, press Enter.
    Remember, always be cautious with files from unknown sources!
    """
    input(message)

def main():
    download_fake_modules()  # Simulate module download at the start
    fake_encrypt()
    fake_exfiltration()
    display_ransom_note()
    fake_decrypt()

if __name__ == "__main__":
    main()
